import React from 'react'
import { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import jwt from "jsonwebtoken";
import CustomSelect from "../components/selectComponent";
import options from "../components/options";
import { trpc } from '../utils/trpc';

const KEY = 'azertyuiopqsdfghjklmwxcvbn';

interface User {
  id: string;
  email: string;
  firstname: string;
  lastname: string;
  promotion: string;
  tags?: string[];
  isActive: boolean;
}

const Search: NextPage = () => {

  const [username, setUsername] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [userProfiles, setUserProfiles] = useState<User[]>([]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      const decodedToken = jwt.verify(token, KEY);
      if (typeof decodedToken !== 'string') {
        const username = decodedToken.username.charAt(0).toUpperCase() + decodedToken.username.slice(1);
        setUsername(username);
      }
    }
  }, []);

  const [selectedOption, setSelectedOption] = useState<{ label: string; value: string } | null>(null);

  const handleOptionChange = (option: { label: string; value: string } | null) => {
    setSelectedOption(option);
  };

  const profilesQuery = trpc.signup.getProfilesByTags.useQuery(tags);

  useEffect(() => {
    const fetchData = async () => {
      const result = await profilesQuery.refetch();
      if (result.data && Array.isArray(result.data)) {
        const filteredProfiles = result.data.filter(profile => {
          const profileTags = profile.tags || [];
          return tags.every(tag => profileTags.includes(tag));
        });
        setUserProfiles(filteredProfiles);
      }
    };
    fetchData();
  }, [tags]);

  const handleAddTag = () => {
    if (selectedOption && !tags.includes(selectedOption.value)) {
      setTags([...tags, selectedOption.value]);
    }
  };

  const handleClearTags = () => {
    setTags([]);
  };

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <main className="flex flex-col text-neutral-500">
          <div className='flex flex-col items-center justify-center w-full'>
            <div id="searchfield">
              <div className="flex items-center justify-center mt-[10%]">
                <div className='w-2/3'>
                  <CustomSelect name='custom-select' value={selectedOption} onChange={handleOptionChange} options={options} />
                </div>
                <div className='flex w-1/3'>
                  <button id='addtags' type="button" className='addbutton2 w-[90%] ml-[10%]' onClick={handleAddTag}>ADD</button>
                  <button id='cleartags' type="button" className='addbutton2 w-[90%] ml-[10%]' onClick={handleClearTags}>CLEAR</button>
                </div>
              </div>
              <div id='tags' className='flex flex-wrap items-center justify-center gap-[5px] w-full mt-5'>
                {tags.map((tag, index) => (
                  <div id='tag' className="tag" key={index}>
                    {tag}
                  </div>
                ))}
              </div>
            </div>
            <div id="profilesbox" className="flex flex-wrap items-center justify-center w-[90%]">
              {userProfiles.length > 0 && userProfiles.map((userProfile) => (
                <div className="userProfile" key={userProfile.id}>
                  <div id="minibox">
                    <div id='userinfos' className='text-black'>{userProfile.firstname} {userProfile.lastname}</div>
                    <div id='userinfos' className='text-black'>{userProfile.email}</div>
                    <div id='userinfos' className='text-black'>{userProfile.promotion}</div>
                    <div className='flex flex-wrap mt-[30px]'>
                      {userProfile.tags ? userProfile.tags.map((tag: string | null | undefined, index: number) => (
                        <div key={index} id='mytags'>{tag}</div>
                      )) : null}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </main>
    </>
  );
};

export default Search;
