import React from 'react'
import { AppType } from "next/app";
import { Session } from "next-auth";
import { SessionProvider } from "next-auth/react";
import { trpc } from "../utils/trpc";
import "../styles/globals.css";
import { Navbar } from "../components/Navbar";
import Head from "next/head";
import { useState, useEffect } from "react";
import router from "next/router";
import PropTypes, { Validator } from "prop-types";

interface MyAppProps {
  session: Session | null | undefined;
  Component?: React.ElementType<unknown>;
  pageProps?: {
    session: Session | null | undefined;
    [key: string]: any;
  };
}

const MyApp: AppType<MyAppProps> = ({ Component, pageProps }) => {
  const [token, setToken] = useState<string>("");

  useEffect(() => {
    const storedToken = localStorage.getItem("token");
    if (storedToken) {
      setToken(storedToken);
    }
  }, []);

  const handleSignOut = () => {
    localStorage.removeItem("token");
    setToken("");
    router.push("/");
  };

  const handleSignIn = async (token: string) => {
    setToken(token);
    router.push("/myprofile");
  };

  return (
    <SessionProvider session={pageProps?.session}>
      <Head>
        <title>BeMatch</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full h-full">
        <Navbar token={token} handleSignOut={handleSignOut} />
        {Component && pageProps && (
          <Component
            {...pageProps}
            setToken={setToken}
            handleSignIn={handleSignIn}
          />
        )}
      </div>
    </SessionProvider>
  );
};

export default trpc.withTRPC(MyApp);
